{"ast":null,"code":"import { messaging } from './firebase-config';\nimport { getToken, onMessage } from 'firebase/messaging';\nconst VAPID_KEY = process.env.FIREBASE_VAPID_KEY;\n\n/**\n * Request FCM Device Token\n * @returns {Promise<string|null>} The FCM token or null if permission denied\n */\nexport const requestFcmToken = async () => {\n  try {\n    const permission = Notification.permission;\n    console.log('권한 체크:', permission);\n    if (permission == 'default' || permission == 'denied') {\n      await Notification.requestPermission();\n    }\n    if (permission != 'granted') {\n      console.error('Notification permission not granted');\n      return null;\n    }\n    const token = await getToken(messaging, {\n      vapidKey: VAPID_KEY\n    });\n    console.log('FCM Device Token:', token);\n    return token;\n  } catch (error) {\n    console.error('Failed to get FCM Token:', error);\n    return null;\n  }\n};\nexport const listenForMessages = callback => {\n  onMessage(messaging, payload => {\n    console.log('Message 도착:', payload);\n    if (callback) {\n      callback(payload);\n    }\n  });\n};","map":{"version":3,"names":["messaging","getToken","onMessage","VAPID_KEY","process","env","FIREBASE_VAPID_KEY","requestFcmToken","permission","Notification","console","log","requestPermission","error","token","vapidKey","listenForMessages","callback","payload"],"sources":["/Users/sinmincheol/study/push-notification/web/src/fcm.js"],"sourcesContent":["import { messaging } from './firebase-config'\nimport { getToken, onMessage } from 'firebase/messaging'\n\nconst VAPID_KEY = process.env.FIREBASE_VAPID_KEY;\n\n/**\n * Request FCM Device Token\n * @returns {Promise<string|null>} The FCM token or null if permission denied\n */\nexport const requestFcmToken = async () => {\n\ttry {\n\t\tconst permission = Notification.permission;\n\t\tconsole.log('권한 체크:', permission);\n\n\n\t\tif (permission == 'default' || permission == 'denied') {\n\t\t\tawait Notification.requestPermission();\n\t\t}\n\n\t\tif (permission != 'granted') {\n\t\t\tconsole.error('Notification permission not granted');\n\t\t\treturn null;\n\t\t}\n\n\t\tconst token = await getToken(messaging, { vapidKey : VAPID_KEY });\n\t\tconsole.log('FCM Device Token:', token);\n\t\treturn token;\n\t} catch (error) {\n\t\tconsole.error('Failed to get FCM Token:', error);\n\t\treturn null;\n\t}\n};\n\nexport const listenForMessages = (callback) => {\n\tonMessage(messaging, (payload) => {\n\t\tconsole.log('Message 도착:', payload);\n\t\tif (callback) {\n\t\t\tcallback(payload);\n\t\t}\n\t})\n}"],"mappings":"AAAA,SAASA,SAAS,QAAQ,mBAAmB;AAC7C,SAASC,QAAQ,EAAEC,SAAS,QAAQ,oBAAoB;AAExD,MAAMC,SAAS,GAAGC,OAAO,CAACC,GAAG,CAACC,kBAAkB;;AAEhD;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EAC1C,IAAI;IACH,MAAMC,UAAU,GAAGC,YAAY,CAACD,UAAU;IAC1CE,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEH,UAAU,CAAC;IAGjC,IAAIA,UAAU,IAAI,SAAS,IAAIA,UAAU,IAAI,QAAQ,EAAE;MACtD,MAAMC,YAAY,CAACG,iBAAiB,CAAC,CAAC;IACvC;IAEA,IAAIJ,UAAU,IAAI,SAAS,EAAE;MAC5BE,OAAO,CAACG,KAAK,CAAC,qCAAqC,CAAC;MACpD,OAAO,IAAI;IACZ;IAEA,MAAMC,KAAK,GAAG,MAAMb,QAAQ,CAACD,SAAS,EAAE;MAAEe,QAAQ,EAAGZ;IAAU,CAAC,CAAC;IACjEO,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEG,KAAK,CAAC;IACvC,OAAOA,KAAK;EACb,CAAC,CAAC,OAAOD,KAAK,EAAE;IACfH,OAAO,CAACG,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,OAAO,IAAI;EACZ;AACD,CAAC;AAED,OAAO,MAAMG,iBAAiB,GAAIC,QAAQ,IAAK;EAC9Cf,SAAS,CAACF,SAAS,EAAGkB,OAAO,IAAK;IACjCR,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEO,OAAO,CAAC;IACnC,IAAID,QAAQ,EAAE;MACbA,QAAQ,CAACC,OAAO,CAAC;IAClB;EACD,CAAC,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}